// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Event {
  id                  String       @id @default(cuid())
  externalId          String       @unique
  source              String
  title               String
  description         String?      @db.Text
  startDateTime       DateTime
  endDateTime         DateTime?
  locationName        String?
  address             String?
  latitude            Float?
  longitude           Float?
  distanceFromPrague  Float?
  category            String?
  ageMin              Int?
  ageMax              Int?
  adultPrice          Float?
  childPrice          Float?
  familyPrice         Float?
  isOutdoor           Boolean      @default(false)
  durationMinutes     Int?
  imageUrl            String?
  bookingUrl          String?
  scoreToddler        Int          @default(0)
  scoreChild          Int          @default(0)
  scoreFamily         Int          @default(0)
  createdAt           DateTime     @default(now())
  updatedAt           DateTime     @updatedAt
  attendances         Attendance[]

  @@index([startDateTime])
  @@index([scoreToddler])
  @@index([scoreChild])
  @@index([scoreFamily])
  @@index([source])
}

model User {
  id            String       @id @default(cuid())
  email         String       @unique
  passwordHash  String
  name          String?
  attendances   Attendance[]
  favorites     Favorite[]
  preference    Preference?
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
}

model Attendance {
  id           String   @id @default(cuid())
  eventId      String
  userId       String
  attendedDate DateTime
  rating       Int?
  notes        String?  @db.Text
  photos       String[]
  actualCost   Float?
  event        Event    @relation(fields: [eventId], references: [id], onDelete: Cascade)
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt    DateTime @default(now())

  @@unique([eventId, userId, attendedDate])
  @@index([userId])
  @@index([eventId])
}

model Favorite {
  id        String   @id @default(cuid())
  eventId   String
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())

  @@unique([eventId, userId])
  @@index([userId])
}

model Preference {
  id                String  @id @default(cuid())
  userId            String  @unique
  budgetMonthly     Float?
  preferenceWeights Json?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model ScrapeLog {
  id         String   @id @default(cuid())
  source     String
  status     String
  eventsFound Int     @default(0)
  errorMessage String? @db.Text
  executionTime Int?
  createdAt  DateTime @default(now())

  @@index([createdAt])
  @@index([source])
}
